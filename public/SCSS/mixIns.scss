/**
* * flex_basic_layout
* * direction이 row 인(=>) flex의 구조이며, 매개변수가 없을시 justify, align-items를 통해 가운데 정렬을 한다.
*/
@mixin flex_basic_layout(
  $direction: row,
  $justify-content: center,
  $align-items: center
) {
  display: flex;
  margin-bottom: 10px;
  flex-direction: $direction;
  justify-content: $justify-content;
  align-items: $align-items;
}

//* grid의 구조 열이 2개이며 , 비율을 매개변수로 받음 기본적으로, 1 : 1 비율로 설정되어 있음. place-center에 의해 해당 요소둘은 가운데 배치되게 됨
@mixin grid_column_layout($template: 1fr 1fr) {
  display: grid;
  justify-content: center;
  place-items: center;
  grid-template-columns: $template;
}

//* grid의 구조 행이 2개이며 , 비율을 매개변수로 받음 기본적으로, 1 : 1 비율로 설정되어 있음. place-center에 의해 해당 요소둘은 가운데 배치되게 됨
@mixin grid_row_layout($template: 1fr 1fr) {
  display: grid;
  place-items: center;
  grid-template-rows: $template;
}

//* 해당 콘테이너의 width, height를 매개 변수 삼아 너비와 높이를 설정한디.
@mixin create_contents_container($width_val, $height_val) {
  width: $width_val;
  height: $height_val;
}

@mixin MainContainer($widthPx, $heightPx, $marginPx : 0px, $paddingPx : 0px)
{
  width: if($widthPx == auto or $widthPx == 0, $widthPx, TransPixelToVW($widthPx));
  height: if($heightPx == auto or $widthPx == 0, $heightPx, TransPixelToVH($heightPx));
  
  // * border-line 기준의 pixel값이기 때문에 box-sizing을 변경해 준다.
  box-sizing: border-box;

  /* 
   * 현재 margin, paddin의 전체 길이를 구한다
   * 구하는 이유는 for문을 쓰기 위해서 
   */
  $marginLength : length($marginPx);
  $paddingLength : length($paddingPx); 

  //@debug "Length #{$marginLength}, #{$paddingLength}";

  /*
  * margin의 배열을 받아와서, 배열의 요소들이 pixel로 되어 있기 때문에 vw로 변환하는 작업
  */
  @for $item from 1 to $marginLength+1
  {
    // * 
    $value : nth($marginPx, $item);
    $num : ();
    $index : 1;
    @if($value !=0 or $value != auto)
    {      
      //#{$marginPx}: list.set-nth($list: $marginPx, $n: $item, $value: TransPixelToVW($value));
      @if($index % 2 == 0)
      {
        $marginPx: set-nth($list: $marginPx, $n: $item, $value: TransPixelToVW($value));
      }
      @else
      {
        $marginPx: set-nth($list: $marginPx, $n: $item, $value: TransPixelToVH($value));
      }
      $index : $index+1;
    }  
  }

  @for $item from 1 to $paddingLength+1
  {
    $value : nth($paddingPx, $item);
    $index : 1;
    @if($value !=0 or $value != auto)
    {
      //$paddingLength: set-nth($list: $paddingPx, $n: $item, $value: TransPixelToVW($value));
      //$paddingPx: set-nth($list: $paddingPx, $n: $item, $value: TransPixelToVW($value));
      @if($index % 2 == 0)
      {
        $marginPx: set-nth($list: $marginPx, $n: $item, $value: TransPixelToVW($value));
      }
      @else
      {
        $marginPx: set-nth($list: $marginPx, $n: $item, $value: TransPixelToVH($value));
      }
      $index : $index+1;
    }  
  }

  padding: $paddingPx;
  margin: $marginPx;
}
